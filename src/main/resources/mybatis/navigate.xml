<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="navigate">

    <select id="navigate" resultType="java.util.LinkedHashMap" >
        select nhdplus_navigation.navigate_cached(
               pnavigationtype           := <choose><when test="navigationMode != null">#{navigationMode,jdbcType=VARCHAR}</when><otherwise>null</otherwise></choose>
              ,pstartcomid               := <choose><when test="comid != null">#{comid,jdbcType=NUMERIC}</when><otherwise>null</otherwise></choose>
              ,pstartpermanentidentifier := null
              ,pstartreachcode           := null
              ,pstartmeasure             := null
              ,pstopcomid                := <choose><when test="stopComid != null">#{stopComid,jdbcType=NUMERIC}</when><otherwise>null</otherwise></choose>
              ,pstoppermanentidentifier  := null
              ,pstopreachcode            := null
              ,pstopmeasure              := null
              ,pmaxdistancekm            := <choose><when test="distance != null">#{distance,jdbcType=NUMERIC}</when><otherwise>null</otherwise></choose>
              ,pmaxflowtimehour          := null
              ,pdebug                    := 'FALSE'
              ,paddflowlineattributes    := 'FALSE'
              ,paddflowlinegeometry      := 'FALSE'
              );
    </select>

    <select id="getCache" resultType="String">
        select min(session_id) session_id
          from nhdplus_navigation.navigation_cache_status
         where return_code = 0 and
               start_comid = #{comid} and
               navigation_mode = #{navigationMode}
        <choose>
            <when test="null != distance">
                and max_distance = #{distance}
            </when>
            <otherwise>
                and max_distance is null
            </otherwise>
        </choose>
        <choose>
            <when test="null != stopComid">
                and stop_comid = #{stopComid}
            </when>
            <otherwise>
                and stop_comid is null
            </otherwise>
        </choose>
    </select>

    <sql id="core">
        <choose>
            <when test="navigationMode == 'DM'">
                <include refid="navigate.DM"/>
            </when>
            <when test="navigationMode == 'DD'">
                <include refid="navigate.DD"/>
            </when>
            <when test="navigationMode == 'UM'">
                <include refid="navigate.UM"/>
            </when>
            <when test="navigationMode == 'UT'">
                <include refid="navigate.UT"/>
            </when>
        </choose>
    </sql>

    <sql id="DM">
        with recursive nav(comid, terminalpathid, dnhydroseq, pathlength, lengthkm, startlength)
          as (select comid, terminalpathid, dnhydroseq, pathlength, lengthkm, pathlength + lengthkm startlength
                from nhdplus.plusflowlinevaa_np21
               where comid = #{comid,jdbcType=NUMERIC}
              union all
              select x.comid, x.terminalpathid, x.dnhydroseq, x.pathlength, x.lengthkm, nav.startlength
                from nhdplus.plusflowlinevaa_np21 x,
                     nav
               where x.hydroseq = nav.dnhydroseq and
                     x.terminalpathid = nav.terminalpathid
             )
    </sql>

    <sql id="DD">
        with recursive nav(comid, hydroseq, terminalpathid, dnhydroseq, dnminorhyd, pathlength, lengthkm, startlength, navlength)
          as (select comid, hydroseq, terminalpathid, dnhydroseq, dnminorhyd, pathlength, lengthkm, pathlength + lengthkm startlength, lengthkm+0 navlength
                from nhdplus.plusflowlinevaa_np21
               where comid = #{comid,jdbcType=NUMERIC}
              union all
              select x.comid, x.hydroseq, x.terminalpathid, x.dnhydroseq, x.dnminorhyd, x.pathlength, x.lengthkm, nav.startlength, nav.navlength + x.lengthkm
                from nhdplus.plusflowlinevaa_np21 x,
                     nav
               where x.hydroseq = nav.dnhydroseq or
                     x.hydroseq = nav.dnminorhyd
             )
    </sql>

    <sql id="UM">
        with recursive nav(comid, levelpathid, uphydroseq, pathlength, startlength)
          as (select comid, levelpathid, uphydroseq, pathlength, pathlength+0 startlength
                from nhdplus.plusflowlinevaa_np21
               where comid = #{comid,jdbcType=NUMERIC}
              union all
              select x.comid, x.levelpathid, x.uphydroseq, x.pathlength, nav.startlength
                from nhdplus.plusflowlinevaa_np21 x,
                     nav
               where x.hydroseq = nav.uphydroseq and
                     x.levelpathid = nav.levelpathid
             )
    </sql>

    <sql id="UT">
        with recursive nav(comid, hydroseq, levelpathid, uphydroseq, pathlength, lengthkm, startlength, navlength)
          as (select comid, hydroseq, levelpathid, uphydroseq, pathlength, lengthkm, pathlength+0 startlength, lengthkm+0 navlength
                from nhdplus.plusflowlinevaa_np21
               where comid = #{comid,jdbcType=NUMERIC}
              union all
              select x.comid, x.hydroseq, x.levelpathid, x.uphydroseq, x.pathlength, x.lengthkm, nav.startlength, nav.navlength + x.lengthkm
                from nhdplus.plusflowlinevaa_np21 x,
                     nav
               where x.dnhydroseq = nav.hydroseq and
                     x.dnlevelpathid = nav.levelpathid
             )
    </sql>

    <sql id="distance">
        <choose>
            <when test="navigationMode == 'DM'">
                <include refid="navigate.distanceDM"/>
            </when>
            <when test="navigationMode == 'DD'">
                <include refid="navigate.distanceDD"/>
            </when>
            <when test="navigationMode == 'UM'">
                <include refid="navigate.distanceUM"/>
            </when>
            <when test="navigationMode == 'UT'">
                <include refid="navigate.distanceUT"/>
            </when>
        </choose>
    </sql>

    <sql id="distanceDM">
        <if test="null != distance">
            and nav.pathlength + nav.lengthkm >= nav.startlength - #{distance}
        </if>
    </sql>

    <sql id="distanceDD">
        <if test="null != distance">
            and nav.pathlength + nav.lengthkm >= nav.startlength - #{distance}
        </if>
    </sql>

    <sql id="distanceUM">
        <if test="null != distance">
            and nav.pathlength &lt;= nav.startlength + #{distance}
        </if>
    </sql>

    <sql id="distanceUT">
        <if test="null != distance">
            and nav.pathlength &lt;= nav.startlength + #{distance}
        </if>
    </sql>
</mapper>